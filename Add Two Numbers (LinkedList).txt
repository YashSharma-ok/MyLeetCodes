/*
LL contains +ve digits, The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
1 -> 0 -> 8         =   801
8 -> 5 -> 6 ->3  = 3658
---------------------------
9 -> 5 -> 4 -> 4 = 4459
*/

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       int carry= 0;
       ListNode l3;
       int sum = l1.val+ l2.val;
       if(sum > 9){
           sum = sum%10;
           carry= 1;
       }

       l3 = new ListNode( sum );

       ListNode temp= l3;
       l1 = l1.next;
       l2 = l2. next;
       while( l1 != null && l2 != null){
           sum = l1.val+ l2.val + carry;
           if(sum > 9){
              sum = sum%10;
              carry= 1;
            }
           else 
                carry = 0; 
           ListNode newNode = new ListNode( sum ); 
           temp.next = newNode; 
           temp = temp. next;
           
           l1 = l1.next;
           l2 = l2. next;
        }

        while( l1 != null){
           sum = l1.val + carry;
           if(sum > 9){
              sum = sum%10;
              carry= 1;
            }
             else 
                carry = 0; 
           ListNode newNode = new ListNode( sum ); 
           temp.next = newNode; 
           temp = temp. next;
           
           l1 = l1.next;
        }
        while( l2 != null){
           sum = l2.val + carry;
           if(sum > 9){
              sum = sum%10;
              carry= 1;
            }
            else 
                carry = 0; 
           ListNode newNode = new ListNode( sum ); 
           temp.next = newNode; 
           temp = temp. next;
           
           l2= l2.next;
        }
        if( carry == 1){
             ListNode newNode = new ListNode( carry ); 
           temp.next = newNode; 
        }
    return l3;

    }
}
